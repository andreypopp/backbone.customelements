// Generated by CoffeeScript 1.6.2
var defaultOptions, extend, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

extend = require('underscore').extend;

defaultOptions = {
  proto: HTMLElement.prototype
};

exports.reference = function(ref) {
  return {
    type: 'reference',
    ref: ref
  };
};

exports.register = function(elementName, viewClass, options) {
  var proto;

  options = extend({}, defaultOptions, options);
  proto = Object.create(options.proto);
  proto.viewClass = viewClass;
  proto.readyCallback = function() {
    var attribute, _i, _len, _ref;

    options = {};
    _ref = this.attributes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attribute = _ref[_i];
      options[attribute.name] = attribute.value;
    }
    options.el = this;
    this.view = new viewClass(options);
    return this.view.render();
  };
  proto.insertedCallback = function() {
    var _base;

    return typeof (_base = this.view).onEnterDOM === "function" ? _base.onEnterDOM() : void 0;
  };
  proto.removedCallback = function() {
    var _base;

    return typeof (_base = this.view).onLeaveDOM === "function" ? _base.onLeaveDOM() : void 0;
  };
  proto.attributeChangedCallback = function(attrName) {
    return this.view.trigger("change:" + attrName);
  };
  return document.register(elementName, {
    prototype: proto
  });
};

exports.View = (function(_super) {
  __extends(View, _super);

  function View() {
    _ref = View.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  View.registerAs = function(name) {
    return document.register(name, {
      prototype: this.prototype
    });
  };

  View.prototype.readyCallback = function() {
    this.el = this;
    if (typeof this.initialize === "function") {
      this.initialize();
    }
    return typeof this.render === "function" ? this.render() : void 0;
  };

  View.prototype.insertedCallback = function() {
    return typeof this.onEnterDOM === "function" ? this.onEnterDOM() : void 0;
  };

  View.prototype.removedCallback = function() {
    return this.onLeaveDOM();
  };

  return View;

})(HTMLElement);
